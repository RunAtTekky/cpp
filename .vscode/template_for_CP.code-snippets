{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
"Sum of digits of a number": {
  "prefix": "getSum",
  "body": [
    "long long getSumOfDigits(long long x) {",
    "  long long sum = 0;",
    "  while (x > 0) {",
    "    sum += x%10;",
    "    x /= 10;",
    "  }",
    "  return sum;",
    "}"
  ],
  "description": "Sum of digits of a number"
}
,
"Factorial of a number": {
  "prefix": "fact",
  "body": [
    "long long fact(long long n) {",
    "  long long res = 1;",
    "  for (long long i=2; i<=n; i++) {",
    "    res *= i;",
    "  }",
    "  return res;",
    "}"
  ],
  "description": "Factorial of a number"
}
,
"Sum till n natural numbers": {
  "prefix": "nnplusone",
  "body": [
    "long long sumOfnNumbers(long long n) {",
    "  return ((n)*(n+1))/2;",
    "}"
  ],
  "description": "Sum till n natural numbers"
}
,
"codeforces_CP_template": {
  "prefix": "runat",
  "body": [
    "/*",
    "  RunAt - green",
    "*/",
    "#include <iostream>",
    "#include <set>",
    "#include <climits>",
    "#include <string>",
    "#include <numeric>",
    "#include <cmath>",
    "#include <map>",
    "#include <algorithm>",
    "#include <vector>",
    "using namespace std;",
    "",
    "typedef int long long ll;",
    "#define p(a) cout << a << \"\\n\";",
    "#define p2(a,b) cout << a << \" \" << b << \"\\n\";",
    "#define YES cout << \"YES\" << \"\\n\"",
    "#define NO cout << \"NO\" << \"\\n\"",
    "",
    "const int N = 1e5+5;",
    "const int MOD = 1e9+7;";
    "",
    "void solve() {",
    "  ll ${2:n};",
    "  cin >> ${3:n};",
    "  $0",
    "}",
    "",
    "int main() {",
    "  cin.sync_with_stdio(0);",
    "  cin.tie(0);",
    "  int tests = 1;",
    "  cin >> tests;${1:}",
    "  while (tests--) solve();",
    "  return 0;",
    "}",
    ""
  ],
  "description": "codeforces_CP_template"
}
,
"minimal_CP_submit": {
  "prefix": "basic",
  "body": [
    "#include <iostream>",
    "using namespace std;",
    "",
    "int main() {",
    "  int t = 1;",
    "  cin >> t;${1:}",
    "  while (t--) {",
    "    long long ${2:n};",
    "    cin >> ${3:n};",
    "    $0",
    "  }",
    "}",
    ""
  ],
  "description": "minimal_CP_submit"
}
,
"vector input (long long)": {
  "prefix": "vll",
  "body": [
    "vector<long long> vec(n);",
    "for (auto &e: vec) cin >> e;",
	""
  ],
  "description": "vector input (long long)"
}
,
"vector print (long long)": {
  "prefix": "vllp",
  "body": [
    "for (auto &e: vec) cout << e << \" \";",
    "cout << \"\\n\";",
    ""
  ],
  "description": "vector print (long long)"
}
,
"Maximum_SubArray_Sum_Using_DP": {
  "prefix": "kadane",
  "body": [
    "long long maxSubArraySumDP(vector<long long> &v) {",
    "	long long res = v[0];",
    "	long long prev = v[0];",
    "	for (int i=1; i<v.size(); i++) {",
    "		long long curr = max(prev + v[i], v[i]);",
    "		prev = curr;",
    "		res = max(res,curr);",
    "	}",
    "	return res;",
    "}"
  ],
  "description": "Maximum_SubArray_Sum_Using_DP"
}
,
"Sieve of Eratosthenes": {
  "prefix": "sieve",
  "body": [
    "vector<bool> prime(N, true);",
    "void sieve() {",
    "  for (int p = 2; p * p <= N; p++) {",
    "      if (prime[p] == true) {",
    "          for (int i = p * p; i <= N; i += p)",
    "              prime[i] = false;",
    "      }",
    "  }",
    "}"
  ],
  "description": "Sieve of Eratosthenes"
}
}